definitions:
  authmodel.AuthRefreshTokenModel:
    properties:
      refresh_token:
        example: the_refresh_token
        type: string
    required:
    - refresh_token
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
  tinytoken.SingleToken:
    properties:
      expiry_time:
        allOf:
        - $ref: '#/definitions/time.Duration'
        example: 86400000000000
      key:
        type: string
    type: object
  tinytoken.TinyTokenData:
    properties:
      access_token:
        $ref: '#/definitions/tinytoken.SingleToken'
      refresh_token:
        $ref: '#/definitions/tinytoken.SingleToken'
    type: object
  translator.TranslationEntry:
    properties:
      code:
        type: string
      text:
        type: string
    type: object
  translator.TranslationSwaggerResponse:
    properties:
      message:
        $ref: '#/definitions/translator.TranslationEntry'
    type: object
  usermodel.UserDeleteModel:
    properties:
      id:
        type: string
    required:
    - id
    type: object
  usermodel.UserFilterModel:
    properties:
      limit:
        type: integer
      page:
        type: integer
    type: object
  usermodel.UserModel:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      email:
        type: string
      fullname:
        type: string
      hashed_password:
        type: string
      id:
        type: string
      ip:
        type: string
      password:
        type: string
      role:
        enum:
        - admin
        - moderator
        - user
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  usermodel.UserSwaggerParams:
    properties:
      email:
        example: user@example.com
        type: string
      fullname:
        example: John Doe
        type: string
      name:
        example: johndoe
        type: string
      password:
        example: password123
        type: string
      role:
        enum:
        - admin
        - moderator
        - user
        type: string
      username:
        example: johndoe
        type: string
    required:
    - email
    - password
    - role
    type: object
  usermodel.UserUpdateSwaggerModel:
    properties:
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      role:
        enum:
        - admin
        - moderator
        - user
        type: string
      username:
        type: string
    required:
    - email
    - role
    - username
    type: object
  usermodel.UserWithToken:
    properties:
      tokens:
        $ref: '#/definitions/tinytoken.TinyTokenData'
      user:
        $ref: '#/definitions/usermodel.UserModel'
    type: object
  usermodel.UserWithoutPasswordModel:
    properties:
      created_at:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      role:
        enum:
        - admin
        - moderator
        - user
        type: string
      updated_at:
        type: string
      username:
        type: string
    required:
    - email
    - role
    - username
    type: object
host: localhost:8080
info:
  contact:
    email: yusufocaliskan@gmail.com
    name: '@yusufocaliskan'
  description: To manage the whole gptv.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GPTVerse Admin Backend
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Sing-in With Access Token
      operationId: access-token-login
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthRefreshTokenModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserWithToken'
      summary: Login
      tags:
      - Auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Sing out
      operationId: sing-out
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthRefreshTokenModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translator.TranslationSwaggerResponse'
      summary: Logout
      tags:
      - Auth
  /api/v1/auth/refreshToken:
    post:
      consumes:
      - application/json
      description: Generating new accessToken using refreshToken
      operationId: refresh-token
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authmodel.AuthRefreshTokenModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserWithToken'
      summary: Refresh Token
      tags:
      - Auth
  /api/v1/user/create:
    post:
      consumes:
      - application/json
      description: Creates new user
      operationId: create-user
      parameters:
      - description: query params
        in: query
        name: id
        required: true
        type: string
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserWithToken'
      summary: New user
      tags:
      - Users
  /api/v1/user/delete:
    delete:
      consumes:
      - application/json
      description: Deletes a user by given user id
      operationId: Delete-User
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserDeleteModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translator.TranslationSwaggerResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
  /api/v1/user/fetch:
    get:
      description: Get user details by id
      operationId: get-user-by-id
      parameters:
      - description: user id
        format: ObjectID
        in: query
        name: id
        required: true
        type: string
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserWithoutPasswordModel'
      security:
      - BearerAuth: []
      summary: Get User
      tags:
      - Users
  /api/v1/user/fetch-all:
    get:
      description: Get user details by id
      operationId: fetch-all-users
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserFilterModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserWithoutPasswordModel'
      security:
      - BearerAuth: []
      summary: List All Records
      tags:
      - Users
  /api/v1/user/update:
    put:
      consumes:
      - application/json
      description: Updates user informations by giving the Id
      operationId: update-user-informations
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/usermodel.UserUpdateSwaggerModel'
      - description: Language preference
        in: header
        name: Accept-Language
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usermodel.UserSwaggerParams'
      summary: Update User
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
